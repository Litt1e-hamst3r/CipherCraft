class AES_Cipher:

    MIX_C  = [[0x2, 0x3, 0x1, 0x1], [0x1, 0x2, 0x3, 0x1], [0x1, 0x1, 0x2, 0x3], [0x3, 0x1, 0x1, 0x2]]
    I_MIXC = [[0xe, 0xb, 0xd, 0x9], [0x9, 0xe, 0xb, 0xd], [0xd, 0x9, 0xe, 0xb], [0xb, 0xd, 0x9, 0xe]]
    RCON   = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000]

    S_BOX = [[0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
             [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
             [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
             [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
             [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
             [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
             [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
             [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
             [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
             [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
             [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
             [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
             [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
             [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
             [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
             [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]]

    INV_SBOX = [[0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
              [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
              [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
              [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
              [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
              [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
              [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
              [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
              [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
              [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
              [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
              [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
              [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
              [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
              [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
              [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]]

    def __init__(self, key, mode='ECB'):
            """初始化"""
            self.key = key
            self.subkey_list = self.__generate_keys(key)

    def __sub_bytes(self, state):
        # 字节替换
        return [self.S_BOX[i][j] for i, j in  [(_ >> 4, _ & 0xF) for _ in state]]

    def __sub_bytes_Inv(self, state):
        # 字节逆替换
        return [self.INV_SBOX[i][j] for i, j in [(_ >> 4, _ & 0xF) for _ in state]]

    def __shift_rows(self, S):
        # 行移位
        return [S[ 0], S[ 5], S[10], S[15], 
                S[ 4], S[ 9], S[14], S[ 3],
                S[ 8], S[13], S[ 2], S[ 7],
                S[12], S[ 1], S[ 6], S[11]]

    def __shift_rows_Inv(self, S):
        # 逆行移位
        return [S[ 0], S[13], S[10], S[ 7],
                S[ 4], S[ 1], S[14], S[11],
                S[ 8], S[ 5], S[ 2], S[15],
                S[12], S[ 9], S[ 6], S[ 3]]

    def __mul_with_mod(self, poly1, poly2, mod=0b100011011):
        # 多项式相乘
        result = 0
        for index in range(poly2.bit_length()):
            if poly2 & 1 << index:
                result ^= poly1 << index
        while result.bit_length() > 8:
            result ^= mod << result.bit_length() - 9
        return result

    def __matrix_mul(self, M1, M2):
        # 列混合
        M = [0] * 16
        for row in range(4):
            for col in range(4):
                for r in range(4):
                    M[row + col*4] ^= self.__mul_with_mod(M1[row][r], M2[r+col*4])
        return M

    def __T(self, w_data, n):
        # 函数T 包括字循环 字节代换 轮常量异或
        rot_word = (w_data & 0xffffff) << 8 | (w_data >> 24) # 字循环，就是总体平移一位
        # 字节代换 (用 S-盒 进行字节代换)
        sub_word = 0
        sub_word ^= sum((self.S_BOX[(rot_word >> (i * 8 + 4)) & 0xf][(rot_word >> (i * 8)) & 0xf] << (i * 8)) for i in range(4))
        # 轮常量异或
        return sub_word ^ self.RCON[n]

    def __generate_keys(self, key):
        # 轮密钥产生
        w = [int.from_bytes(key[i:i+4], byteorder='big') for i in range(0, 16, 4)] + [0] * 40
        for i in range(4, 44):
            if not i % 4:               # 如果 i 是 4 的倍数, w[i] = w[i-4] ^ T(w[i-1])
                w[i] = w[i-4] ^ self.__T(w[i-1], i//4-1)
            else:
                w[i] = w[i-4] ^ w[i-1]  # 如果 i 不是 4 的倍数 w[i] = w[i-4] ^ w[i-1]
        subkey_list = []
        for i in range(0, 44, 4):
            subkey = sum([w[i] << 96, w[i+1] << 64, w[i+2] << 32, w[i+3]])
            subkey_list.append(subkey.to_bytes(16, byteorder = 'big'))
        return subkey_list

    def __add_round_key(self, state, index):
        # 异或轮密钥
        return [state[i] ^ self.subkey_list[index][i] for i in range(16)]
    
    def __round_encrypt(self, state):
        for i in range(1, 10):
            state = self.__sub_bytes(state)
            state = self.__shift_rows(state)
            state = self.__matrix_mul(self.MIX_C, state)
            state = self.__add_round_key(state, i)
        return state
    
    def __round_decrypt(self, state):
        for i in range(9, 0, -1):
            state = self.__add_round_key(state, i)
            state = self.__matrix_mul(self.I_MIXC, state)
            state = self.__shift_rows_Inv(state)
            state = self.__sub_bytes_Inv(state)
        return state
        

    def encrypt(self, plaintext):
        # 计算需要填充的字节数
        padding_length = (16 - (len(plaintext) % 16)) % 16
        # 填充到 16 字节的倍数
        padded_plaintext = plaintext + b'\x00' * padding_length
        # 分块处理
        encrypted_blocks = []
        for i in range(0, len(padded_plaintext), 16):
            state = padded_plaintext[i:i+16]
            state = self.__add_round_key(state, 0)
            state = self.__round_encrypt(state)
            state = self.__sub_bytes(state)
            state = self.__shift_rows(state)
            state = self.__add_round_key(state, 10)
            encrypted_blocks.extend(state)
        encrypted_text = b"".join(map(lambda x: x.to_bytes(1, byteorder='big'), encrypted_blocks))
        return encrypted_text

    def decrypt(self, ciphertext):
        # 分块处理
        decrypted_blocks = []
        for i in range(0, len(ciphertext), 16):
            state = ciphertext[i:i+16]
            state = self.__add_round_key(state, 10)
            state = self.__shift_rows_Inv(state)
            state = self.__sub_bytes_Inv(state)
            state = self.__round_decrypt(state)
            state = self.__add_round_key(state, 0)
            decrypted_blocks.extend(state)
        # 去除填充
        decrypted_text = b"".join(map(lambda x: x.to_bytes(1, byteorder='big'), decrypted_blocks))
        # 去除末尾的 \x00 填充
        decrypted_text = decrypted_text.rstrip(b'\x00')
        return decrypted_text    

if __name__ == '__main__':
    key = 0x000102030405060708090a0b0c0d0e0f
    key = key.to_bytes(16, byteorder='big')
    aes = AES_Cipher(key)

    # 加密
    plaintext = 0x00112233445566778899aabbccddeeff
    plaintext = plaintext.to_bytes(16, byteorder = 'big')
    ciphertext = aes.encrypt(plaintext)
    print('ciphertext = ' , ciphertext.hex())

    # 解密
    plaintext = aes.decrypt(ciphertext)
    print('plaintext = ', plaintext.hex())
